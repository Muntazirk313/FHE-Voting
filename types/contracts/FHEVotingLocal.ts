/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FHEVotingLocal {
  export type ProposalInfoStruct = {
    id: BigNumberish;
    title: string;
    description: string;
    startTime: BigNumberish;
    endTime: BigNumberish;
    isActive: boolean;
    totalVotes: BigNumberish;
  };

  export type ProposalInfoStructOutput = [
    id: bigint,
    title: string,
    description: string,
    startTime: bigint,
    endTime: bigint,
    isActive: boolean,
    totalVotes: bigint
  ] & {
    id: bigint;
    title: string;
    description: string;
    startTime: bigint;
    endTime: bigint;
    isActive: boolean;
    totalVotes: bigint;
  };
}

export interface FHEVotingLocalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createProposal"
      | "endProposal"
      | "getAllProposals"
      | "getEncryptedOptionAVotes"
      | "getEncryptedOptionBVotes"
      | "getProposalInfo"
      | "hasVoted"
      | "isProposalActive"
      | "proposalCount"
      | "proposals"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ProposalCreated"
      | "ProposalEnded"
      | "VoteCast"
      | "VoteResultDecrypted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedOptionAVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedOptionBVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isProposalActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedOptionAVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedOptionBVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isProposalActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    title: string,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    title: string,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    title: string;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalEndedEvent {
  export type InputTuple = [proposalId: BigNumberish, totalVotes: BigNumberish];
  export type OutputTuple = [proposalId: bigint, totalVotes: bigint];
  export interface OutputObject {
    proposalId: bigint;
    totalVotes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    voter: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    voter: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    voter: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteResultDecryptedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    optionAVotes: BigNumberish,
    optionBVotes: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    optionAVotes: bigint,
    optionBVotes: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    optionAVotes: bigint;
    optionBVotes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FHEVotingLocal extends BaseContract {
  connect(runner?: ContractRunner | null): FHEVotingLocal;
  waitForDeployment(): Promise<this>;

  interface: FHEVotingLocalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createProposal: TypedContractMethod<
    [
      title: string,
      description: string,
      startTime: BigNumberish,
      endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  endProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllProposals: TypedContractMethod<
    [],
    [FHEVotingLocal.ProposalInfoStructOutput[]],
    "view"
  >;

  getEncryptedOptionAVotes: TypedContractMethod<
    [proposalId: BigNumberish],
    [string],
    "view"
  >;

  getEncryptedOptionBVotes: TypedContractMethod<
    [proposalId: BigNumberish],
    [string],
    "view"
  >;

  getProposalInfo: TypedContractMethod<
    [proposalId: BigNumberish],
    [FHEVotingLocal.ProposalInfoStructOutput],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;

  isProposalActive: TypedContractMethod<
    [proposalId: BigNumberish],
    [boolean],
    "view"
  >;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        string,
        string
      ] & {
        id: bigint;
        title: string;
        description: string;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        totalVotes: bigint;
        encryptedOptionAVotes: string;
        encryptedOptionBVotes: string;
      }
    ],
    "view"
  >;

  vote: TypedContractMethod<
    [proposalId: BigNumberish, encryptedVote: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      startTime: BigNumberish,
      endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllProposals"
  ): TypedContractMethod<
    [],
    [FHEVotingLocal.ProposalInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEncryptedOptionAVotes"
  ): TypedContractMethod<[proposalId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getEncryptedOptionBVotes"
  ): TypedContractMethod<[proposalId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getProposalInfo"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [FHEVotingLocal.ProposalInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isProposalActive"
  ): TypedContractMethod<[proposalId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        string,
        string
      ] & {
        id: bigint;
        title: string;
        description: string;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        totalVotes: bigint;
        encryptedOptionAVotes: string;
        encryptedOptionBVotes: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, encryptedVote: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalEnded"
  ): TypedContractEvent<
    ProposalEndedEvent.InputTuple,
    ProposalEndedEvent.OutputTuple,
    ProposalEndedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoteResultDecrypted"
  ): TypedContractEvent<
    VoteResultDecryptedEvent.InputTuple,
    VoteResultDecryptedEvent.OutputTuple,
    VoteResultDecryptedEvent.OutputObject
  >;

  filters: {
    "ProposalCreated(uint256,string,uint256,uint256)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalEnded(uint256,uint256)": TypedContractEvent<
      ProposalEndedEvent.InputTuple,
      ProposalEndedEvent.OutputTuple,
      ProposalEndedEvent.OutputObject
    >;
    ProposalEnded: TypedContractEvent<
      ProposalEndedEvent.InputTuple,
      ProposalEndedEvent.OutputTuple,
      ProposalEndedEvent.OutputObject
    >;

    "VoteCast(uint256,address,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VoteResultDecrypted(uint256,uint256,uint256)": TypedContractEvent<
      VoteResultDecryptedEvent.InputTuple,
      VoteResultDecryptedEvent.OutputTuple,
      VoteResultDecryptedEvent.OutputObject
    >;
    VoteResultDecrypted: TypedContractEvent<
      VoteResultDecryptedEvent.InputTuple,
      VoteResultDecryptedEvent.OutputTuple,
      VoteResultDecryptedEvent.OutputObject
    >;
  };
}
