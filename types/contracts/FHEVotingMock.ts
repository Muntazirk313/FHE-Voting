/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FHEVotingMock {
  export type ProposalInfoStruct = {
    id: BigNumberish;
    description: string;
    exists: boolean;
    startTime: BigNumberish;
    endTime: BigNumberish;
    isActive: boolean;
    yesVotes: BigNumberish;
    noVotes: BigNumberish;
  };

  export type ProposalInfoStructOutput = [
    id: bigint,
    description: string,
    exists: boolean,
    startTime: bigint,
    endTime: bigint,
    isActive: boolean,
    yesVotes: bigint,
    noVotes: bigint
  ] & {
    id: bigint;
    description: string;
    exists: boolean;
    startTime: bigint;
    endTime: bigint;
    isActive: boolean;
    yesVotes: bigint;
    noVotes: bigint;
  };
}

export interface FHEVotingMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createProposal"
      | "getProposalInfo"
      | "getProposalResults"
      | "hasUserVoted"
      | "isProposalActive"
      | "proposalCount"
      | "proposals"
      | "vote"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ProposalCreated" | "Voted"): EventFragment;

  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isProposalActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUserVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProposalActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [proposalId: BigNumberish, description: string];
  export type OutputTuple = [proposalId: bigint, description: string];
  export interface OutputObject {
    proposalId: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    voter: AddressLike,
    vote: boolean
  ];
  export type OutputTuple = [proposalId: bigint, voter: string, vote: boolean];
  export interface OutputObject {
    proposalId: bigint;
    voter: string;
    vote: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FHEVotingMock extends BaseContract {
  connect(runner?: ContractRunner | null): FHEVotingMock;
  waitForDeployment(): Promise<this>;

  interface: FHEVotingMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createProposal: TypedContractMethod<
    [description: string, startTime: BigNumberish, endTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  getProposalInfo: TypedContractMethod<
    [proposalId: BigNumberish],
    [FHEVotingMock.ProposalInfoStructOutput],
    "view"
  >;

  getProposalResults: TypedContractMethod<
    [proposalId: BigNumberish],
    [[bigint, bigint] & { yesVotes: bigint; noVotes: bigint }],
    "view"
  >;

  hasUserVoted: TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;

  isProposalActive: TypedContractMethod<
    [proposalId: BigNumberish],
    [boolean],
    "view"
  >;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, boolean, bigint, bigint, boolean, bigint, bigint] & {
        description: string;
        exists: boolean;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        yesVotes: bigint;
        noVotes: bigint;
      }
    ],
    "view"
  >;

  vote: TypedContractMethod<
    [proposalId: BigNumberish, encryptedVote: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [description: string, startTime: BigNumberish, endTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProposalInfo"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [FHEVotingMock.ProposalInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposalResults"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [[bigint, bigint] & { yesVotes: bigint; noVotes: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasUserVoted"
  ): TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isProposalActive"
  ): TypedContractMethod<[proposalId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, boolean, bigint, bigint, boolean, bigint, bigint] & {
        description: string;
        exists: boolean;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        yesVotes: bigint;
        noVotes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, encryptedVote: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;

  filters: {
    "ProposalCreated(uint256,string)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "Voted(uint256,address,bool)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
  };
}
