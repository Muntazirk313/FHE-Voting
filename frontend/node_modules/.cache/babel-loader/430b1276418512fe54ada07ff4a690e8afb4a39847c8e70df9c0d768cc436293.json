{"ast":null,"code":"var _jsxFileName = \"/workspaces/FHE-Voting/frontend/src/contexts/WalletContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletContext = /*#__PURE__*/createContext(undefined);\nexport const useWallet = () => {\n  _s();\n  const context = useContext(WalletContext);\n  if (context === undefined) {\n    throw new Error(\"useWallet must be used within a WalletProvider\");\n  }\n  return context;\n};\n_s(useWallet, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const WalletProvider = ({\n  children\n}) => {\n  _s2();\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [chainId, setChainId] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState(null);\n  const SEPOLIA_CHAIN_ID = 11155111;\n  const connect = async () => {\n    if (typeof window.ethereum === \"undefined\") {\n      setError(\"MetaMask is not installed. Please install MetaMask to use this DApp.\");\n      return;\n    }\n    try {\n      setIsConnecting(true);\n      setError(null);\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const account = accounts[0];\n      setAccount(account);\n\n      // Create provider and signer\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      setProvider(provider);\n      setSigner(signer);\n\n      // Get current chain ID\n      const network = await provider.getNetwork();\n      setChainId(Number(network.chainId));\n\n      // Check if we need to switch to Sepolia\n      if (Number(network.chainId) !== SEPOLIA_CHAIN_ID) {\n        await switchToSepolia();\n      }\n      setIsConnected(true);\n    } catch (err) {\n      console.error(\"Error connecting wallet:\", err);\n      setError(\"Failed to connect wallet. Please try again.\");\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n  const disconnect = () => {\n    setAccount(null);\n    setProvider(null);\n    setSigner(null);\n    setChainId(null);\n    setIsConnected(false);\n    setError(null);\n  };\n  const switchToSepolia = async () => {\n    if (!provider) return;\n    try {\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: `0x${SEPOLIA_CHAIN_ID.toString(16)}`\n        }]\n      });\n      const network = await provider.getNetwork();\n      setChainId(Number(network.chainId));\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask\n      if (switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: `0x${SEPOLIA_CHAIN_ID.toString(16)}`,\n              chainName: \"Sepolia Testnet\",\n              nativeCurrency: {\n                name: \"Sepolia Ether\",\n                symbol: \"SEP\",\n                decimals: 18\n              },\n              rpcUrls: [\"https://sepolia.infura.io/v3/\"],\n              blockExplorerUrls: [\"https://sepolia.etherscan.io/\"]\n            }]\n          });\n        } catch (addError) {\n          console.error(\"Error adding Sepolia network:\", addError);\n          setError(\"Failed to add Sepolia network to MetaMask.\");\n        }\n      } else {\n        console.error(\"Error switching to Sepolia:\", switchError);\n        setError(\"Failed to switch to Sepolia network.\");\n      }\n    }\n  };\n  useEffect(() => {\n    if (typeof window.ethereum !== \"undefined\") {\n      // Check if already connected\n      const checkConnection = async () => {\n        try {\n          const accounts = await window.ethereum.request({\n            method: \"eth_accounts\"\n          });\n          if (accounts.length > 0) {\n            setAccount(accounts[0]);\n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const signer = await provider.getSigner();\n            setProvider(provider);\n            setSigner(signer);\n            const network = await provider.getNetwork();\n            setChainId(Number(network.chainId));\n            setIsConnected(true);\n          }\n        } catch (err) {\n          console.error(\"Error checking connection:\", err);\n        }\n      };\n      checkConnection();\n\n      // Listen for account changes\n      const handleAccountsChanged = accounts => {\n        if (accounts.length === 0) {\n          disconnect();\n        } else {\n          setAccount(accounts[0]);\n        }\n      };\n\n      // Listen for chain changes\n      const handleChainChanged = chainId => {\n        setChainId(parseInt(chainId, 16));\n      };\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      window.ethereum.on(\"chainChanged\", handleChainChanged);\n      return () => {\n        window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n        window.ethereum.removeListener(\"chainChanged\", handleChainChanged);\n      };\n    }\n  }, []);\n  const value = {\n    account,\n    provider,\n    signer,\n    chainId,\n    isConnected,\n    isConnecting,\n    error,\n    connect,\n    disconnect,\n    switchToSepolia\n  };\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 10\n  }, this);\n};\n\n// Extend Window interface for MetaMask\n_s2(WalletProvider, \"HnJNIdaKq/7EGBXxHOuZUDmh9js=\");\n_c = WalletProvider;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","ethers","jsxDEV","_jsxDEV","WalletContext","undefined","useWallet","_s","context","Error","WalletProvider","children","_s2","account","setAccount","provider","setProvider","signer","setSigner","chainId","setChainId","isConnected","setIsConnected","isConnecting","setIsConnecting","error","setError","SEPOLIA_CHAIN_ID","connect","window","ethereum","accounts","request","method","BrowserProvider","getSigner","network","getNetwork","Number","switchToSepolia","err","console","disconnect","params","toString","switchError","code","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","addError","checkConnection","length","handleAccountsChanged","handleChainChanged","parseInt","on","removeListener","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/FHE-Voting/frontend/src/contexts/WalletContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\nimport { ethers } from \"ethers\";\nimport { WalletState } from \"../types\";\n\ninterface WalletContextType extends WalletState {\n  connect: () => Promise<void>;\n  disconnect: () => void;\n  switchToSepolia: () => Promise<void>;\n}\n\nconst WalletContext = createContext<WalletContextType | undefined>(undefined);\n\nexport const useWallet = () => {\n  const context = useContext(WalletContext);\n  if (context === undefined) {\n    throw new Error(\"useWallet must be used within a WalletProvider\");\n  }\n  return context;\n};\n\ninterface WalletProviderProps {\n  children: ReactNode;\n}\n\nexport const WalletProvider: React.FC<WalletProviderProps> = ({ children }) => {\n  const [account, setAccount] = useState<string | null>(null);\n  const [provider, setProvider] = useState<ethers.BrowserProvider | null>(null);\n  const [signer, setSigner] = useState<ethers.JsonRpcSigner | null>(null);\n  const [chainId, setChainId] = useState<number | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const SEPOLIA_CHAIN_ID = 11155111;\n\n  const connect = async () => {\n    if (typeof window.ethereum === \"undefined\") {\n      setError(\"MetaMask is not installed. Please install MetaMask to use this DApp.\");\n      return;\n    }\n\n    try {\n      setIsConnecting(true);\n      setError(null);\n\n      // Request account access\n      const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      const account = accounts[0];\n      setAccount(account);\n\n      // Create provider and signer\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n\n      setProvider(provider);\n      setSigner(signer);\n\n      // Get current chain ID\n      const network = await provider.getNetwork();\n      setChainId(Number(network.chainId));\n\n      // Check if we need to switch to Sepolia\n      if (Number(network.chainId) !== SEPOLIA_CHAIN_ID) {\n        await switchToSepolia();\n      }\n\n      setIsConnected(true);\n    } catch (err) {\n      console.error(\"Error connecting wallet:\", err);\n      setError(\"Failed to connect wallet. Please try again.\");\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  const disconnect = () => {\n    setAccount(null);\n    setProvider(null);\n    setSigner(null);\n    setChainId(null);\n    setIsConnected(false);\n    setError(null);\n  };\n\n  const switchToSepolia = async () => {\n    if (!provider) return;\n\n    try {\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: `0x${SEPOLIA_CHAIN_ID.toString(16)}` }],\n      });\n\n      const network = await provider.getNetwork();\n      setChainId(Number(network.chainId));\n    } catch (switchError: any) {\n      // This error code indicates that the chain has not been added to MetaMask\n      if (switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: \"wallet_addEthereumChain\",\n            params: [\n              {\n                chainId: `0x${SEPOLIA_CHAIN_ID.toString(16)}`,\n                chainName: \"Sepolia Testnet\",\n                nativeCurrency: {\n                  name: \"Sepolia Ether\",\n                  symbol: \"SEP\",\n                  decimals: 18,\n                },\n                rpcUrls: [\"https://sepolia.infura.io/v3/\"],\n                blockExplorerUrls: [\"https://sepolia.etherscan.io/\"],\n              },\n            ],\n          });\n        } catch (addError) {\n          console.error(\"Error adding Sepolia network:\", addError);\n          setError(\"Failed to add Sepolia network to MetaMask.\");\n        }\n      } else {\n        console.error(\"Error switching to Sepolia:\", switchError);\n        setError(\"Failed to switch to Sepolia network.\");\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (typeof window.ethereum !== \"undefined\") {\n      // Check if already connected\n      const checkConnection = async () => {\n        try {\n          const accounts = await window.ethereum.request({ method: \"eth_accounts\" });\n          if (accounts.length > 0) {\n            setAccount(accounts[0]);\n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const signer = await provider.getSigner();\n            setProvider(provider);\n            setSigner(signer);\n\n            const network = await provider.getNetwork();\n            setChainId(Number(network.chainId));\n            setIsConnected(true);\n          }\n        } catch (err) {\n          console.error(\"Error checking connection:\", err);\n        }\n      };\n\n      checkConnection();\n\n      // Listen for account changes\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length === 0) {\n          disconnect();\n        } else {\n          setAccount(accounts[0]);\n        }\n      };\n\n      // Listen for chain changes\n      const handleChainChanged = (chainId: string) => {\n        setChainId(parseInt(chainId, 16));\n      };\n\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      window.ethereum.on(\"chainChanged\", handleChainChanged);\n\n      return () => {\n        window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n        window.ethereum.removeListener(\"chainChanged\", handleChainChanged);\n      };\n    }\n  }, []);\n\n  const value: WalletContextType = {\n    account,\n    provider,\n    signer,\n    chainId,\n    isConnected,\n    isConnecting,\n    error,\n    connect,\n    disconnect,\n    switchToSepolia,\n  };\n\n  return <WalletContext.Provider value={value}>{children}</WalletContext.Provider>;\n};\n\n// Extend Window interface for MetaMask\ndeclare global {\n  interface Window {\n    ethereum: any;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}