{"ast":null,"code":"var _jsxFileName = \"/workspaces/FHE-Voting/frontend/src/contexts/FHEContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { CONTRACTS } from \"../config/contracts\";\n\n// FHE context interface\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FHEContext = /*#__PURE__*/createContext(undefined);\nexport const useFHE = () => {\n  _s();\n  const context = useContext(FHEContext);\n  if (!context) {\n    throw new Error(\"useFHE must be used within an FHEProvider\");\n  }\n  return context;\n};\n_s(useFHE, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const FHEProvider = ({\n  children\n}) => {\n  _s2();\n  const [fhevmInstance, setFhevmInstance] = useState(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isSepolia, setIsSepolia] = useState(false);\n  useEffect(() => {\n    // Initialize FHEVM instance\n    const initializeFHE = async () => {\n      try {\n        // Check if we're on Sepolia network\n        let detectedSepolia = false;\n        if (typeof window !== \"undefined\" && window.ethereum) {\n          try {\n            const chainId = await window.ethereum.request({\n              method: \"eth_chainId\"\n            });\n            detectedSepolia = chainId === \"0xaa36a7\"; // Sepolia chainId\n            console.log(`Detected network: ${detectedSepolia ? \"Sepolia\" : \"Other\"}`);\n          } catch (error) {\n            console.log(\"Could not detect network, using mock FHE\");\n          }\n        }\n        setIsSepolia(detectedSepolia);\n        if (detectedSepolia) {\n          console.log(\"Using Sepolia network with enhanced mock FHE implementation\");\n\n          // For now, use enhanced mock implementation on Sepolia\n          // Real FHE infrastructure contracts are not yet deployed on Sepolia\n          const enhancedMockFHE = {\n            createEncryptedInput: (contractAddress, userAddress) => ({\n              add32: value => ({\n                encrypt: () => {\n                  // Generate enhanced mock data that looks more realistic\n                  const timestamp = Date.now();\n                  const randomBytes = Math.floor(Math.random() * 1000000);\n                  const chainId = 11155111; // Sepolia\n\n                  // Create a more realistic FHE handle format for Sepolia\n                  const encryptedValue = `0x${chainId.toString(16).padStart(8, \"0\")}${value.toString(16).padStart(8, \"0\")}${timestamp.toString(16).padStart(16, \"0\")}${randomBytes.toString(16).padStart(32, \"0\")}`;\n                  const proof = `0x${timestamp.toString(16).padStart(16, \"0\")}${randomBytes.toString(16).padStart(16, \"0\")}${value.toString(16).padStart(8, \"0\")}${chainId.toString(16).padStart(8, \"0\")}`;\n                  return {\n                    handles: [encryptedValue],\n                    inputProof: proof\n                  };\n                }\n              })\n            }),\n            userDecryptEuint: async (type, encryptedValue) => {\n              // Enhanced mock decryption for Sepolia\n              const hexValue = encryptedValue.slice(2);\n              const valuePart = hexValue.slice(8, 16); // Extract value part\n              return parseInt(valuePart, 16);\n            }\n          };\n          setFhevmInstance(enhancedMockFHE);\n          setIsInitialized(true);\n          console.log(\"Enhanced mock FHE initialized for Sepolia network\");\n\n          // Note: Real FHE will be available when infrastructure contracts are deployed\n          console.log(\"Note: Real FHE infrastructure not yet available on Sepolia\");\n        } else {\n          console.log(\"Using mock FHE implementation\");\n          // Fallback to mock implementation\n          const mockFHE = {\n            createEncryptedInput: (contractAddress, userAddress) => ({\n              add32: value => ({\n                encrypt: () => {\n                  // Generate FHE-compatible mock data\n                  const timestamp = Date.now();\n                  const randomBytes = Math.floor(Math.random() * 1000000);\n\n                  // Create a more realistic FHE handle format\n                  const encryptedValue = `0x${value.toString(16).padStart(64, \"0\")}`;\n                  const proof = `0x${timestamp.toString(16).padStart(64, \"0\")}${randomBytes.toString(16).padStart(64, \"0\")}`;\n                  return {\n                    handles: [encryptedValue],\n                    inputProof: proof\n                  };\n                }\n              })\n            }),\n            userDecryptEuint: async (type, encryptedValue) => {\n              // Mock decryption - extract the original value from mock data\n              const hexValue = encryptedValue.slice(2); // Remove 0x prefix\n              const last32Chars = hexValue.slice(-32);\n              return parseInt(last32Chars, 16) % 1000000; // Extract original value\n            }\n          };\n          setFhevmInstance(mockFHE);\n          setIsInitialized(true);\n          console.log(\"FHE context initialized with mock implementation\");\n        }\n      } catch (error) {\n        console.error(\"Failed to initialize FHE context:\", error);\n      }\n    };\n    initializeFHE();\n  }, []);\n  const encryptVote = async vote => {\n    if (!fhevmInstance) {\n      throw new Error(\"FHE context not initialized\");\n    }\n    try {\n      // Create encrypted input for the FHE voting contract\n      const encryptedInput = await fhevmInstance.createEncryptedInput(CONTRACTS.FHE_VOTING, \"0x0000000000000000000000000000000000000000\").add32(vote).encrypt();\n      return {\n        encryptedVote: encryptedInput.handles[0],\n        proof: encryptedInput.inputProof\n      };\n    } catch (error) {\n      console.error(\"Error encrypting vote:\", error);\n      throw error;\n    }\n  };\n  const createEncryptedInput = (contractAddress, userAddress) => {\n    if (!fhevmInstance) {\n      throw new Error(\"FHE context not initialized\");\n    }\n    return fhevmInstance.createEncryptedInput(contractAddress, userAddress);\n  };\n  const value = {\n    isInitialized,\n    isSepolia,\n    fhevmInstance,\n    encryptVote,\n    createEncryptedInput\n  };\n  return /*#__PURE__*/_jsxDEV(FHEContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 10\n  }, this);\n};\n_s2(FHEProvider, \"g2skJ7cG+QWYRZKyuyhC5OWCxrc=\");\n_c = FHEProvider;\nvar _c;\n$RefreshReg$(_c, \"FHEProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","CONTRACTS","jsxDEV","_jsxDEV","FHEContext","undefined","useFHE","_s","context","Error","FHEProvider","children","_s2","fhevmInstance","setFhevmInstance","isInitialized","setIsInitialized","isSepolia","setIsSepolia","initializeFHE","detectedSepolia","window","ethereum","chainId","request","method","console","log","error","enhancedMockFHE","createEncryptedInput","contractAddress","userAddress","add32","value","encrypt","timestamp","Date","now","randomBytes","Math","floor","random","encryptedValue","toString","padStart","proof","handles","inputProof","userDecryptEuint","type","hexValue","slice","valuePart","parseInt","mockFHE","last32Chars","encryptVote","vote","encryptedInput","FHE_VOTING","encryptedVote","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/FHE-Voting/frontend/src/contexts/FHEContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { CONTRACTS } from \"../config/contracts\";\n\n// FHE context interface\ninterface FHEContextType {\n  isInitialized: boolean;\n  isSepolia: boolean;\n  fhevmInstance: any | null;\n  encryptVote: (vote: number) => Promise<{ encryptedVote: string; proof: string }>;\n  createEncryptedInput: (contractAddress: string, userAddress: string) => any;\n}\n\nconst FHEContext = createContext<FHEContextType | undefined>(undefined);\n\nexport const useFHE = () => {\n  const context = useContext(FHEContext);\n  if (!context) {\n    throw new Error(\"useFHE must be used within an FHEProvider\");\n  }\n  return context;\n};\n\ninterface FHEProviderProps {\n  children: React.ReactNode;\n}\n\nexport const FHEProvider: React.FC<FHEProviderProps> = ({ children }) => {\n  const [fhevmInstance, setFhevmInstance] = useState<any | null>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isSepolia, setIsSepolia] = useState(false);\n\n  useEffect(() => {\n    // Initialize FHEVM instance\n    const initializeFHE = async () => {\n      try {\n        // Check if we're on Sepolia network\n        let detectedSepolia = false;\n        if (typeof window !== \"undefined\" && window.ethereum) {\n          try {\n            const chainId = await window.ethereum.request({ method: \"eth_chainId\" });\n            detectedSepolia = chainId === \"0xaa36a7\"; // Sepolia chainId\n            console.log(`Detected network: ${detectedSepolia ? \"Sepolia\" : \"Other\"}`);\n          } catch (error) {\n            console.log(\"Could not detect network, using mock FHE\");\n          }\n        }\n\n        setIsSepolia(detectedSepolia);\n\n        if (detectedSepolia) {\n          console.log(\"Using Sepolia network with enhanced mock FHE implementation\");\n\n          // For now, use enhanced mock implementation on Sepolia\n          // Real FHE infrastructure contracts are not yet deployed on Sepolia\n          const enhancedMockFHE = {\n            createEncryptedInput: (contractAddress: string, userAddress: string) => ({\n              add32: (value: number) => ({\n                encrypt: () => {\n                  // Generate enhanced mock data that looks more realistic\n                  const timestamp = Date.now();\n                  const randomBytes = Math.floor(Math.random() * 1000000);\n                  const chainId = 11155111; // Sepolia\n\n                  // Create a more realistic FHE handle format for Sepolia\n                  const encryptedValue = `0x${chainId.toString(16).padStart(8, \"0\")}${value.toString(16).padStart(8, \"0\")}${timestamp.toString(16).padStart(16, \"0\")}${randomBytes.toString(16).padStart(32, \"0\")}`;\n                  const proof = `0x${timestamp.toString(16).padStart(16, \"0\")}${randomBytes.toString(16).padStart(16, \"0\")}${value.toString(16).padStart(8, \"0\")}${chainId.toString(16).padStart(8, \"0\")}`;\n\n                  return {\n                    handles: [encryptedValue],\n                    inputProof: proof,\n                  };\n                },\n              }),\n            }),\n            userDecryptEuint: async (type: string, encryptedValue: string) => {\n              // Enhanced mock decryption for Sepolia\n              const hexValue = encryptedValue.slice(2);\n              const valuePart = hexValue.slice(8, 16); // Extract value part\n              return parseInt(valuePart, 16);\n            },\n          };\n\n          setFhevmInstance(enhancedMockFHE);\n          setIsInitialized(true);\n          console.log(\"Enhanced mock FHE initialized for Sepolia network\");\n\n          // Note: Real FHE will be available when infrastructure contracts are deployed\n          console.log(\"Note: Real FHE infrastructure not yet available on Sepolia\");\n        } else {\n          console.log(\"Using mock FHE implementation\");\n          // Fallback to mock implementation\n          const mockFHE = {\n            createEncryptedInput: (contractAddress: string, userAddress: string) => ({\n              add32: (value: number) => ({\n                encrypt: () => {\n                  // Generate FHE-compatible mock data\n                  const timestamp = Date.now();\n                  const randomBytes = Math.floor(Math.random() * 1000000);\n\n                  // Create a more realistic FHE handle format\n                  const encryptedValue = `0x${value.toString(16).padStart(64, \"0\")}`;\n                  const proof = `0x${timestamp.toString(16).padStart(64, \"0\")}${randomBytes.toString(16).padStart(64, \"0\")}`;\n\n                  return {\n                    handles: [encryptedValue],\n                    inputProof: proof,\n                  };\n                },\n              }),\n            }),\n            userDecryptEuint: async (type: string, encryptedValue: string) => {\n              // Mock decryption - extract the original value from mock data\n              const hexValue = encryptedValue.slice(2); // Remove 0x prefix\n              const last32Chars = hexValue.slice(-32);\n              return parseInt(last32Chars, 16) % 1000000; // Extract original value\n            },\n          };\n\n          setFhevmInstance(mockFHE);\n          setIsInitialized(true);\n          console.log(\"FHE context initialized with mock implementation\");\n        }\n      } catch (error) {\n        console.error(\"Failed to initialize FHE context:\", error);\n      }\n    };\n\n    initializeFHE();\n  }, []);\n\n  const encryptVote = async (vote: number): Promise<{ encryptedVote: string; proof: string }> => {\n    if (!fhevmInstance) {\n      throw new Error(\"FHE context not initialized\");\n    }\n\n    try {\n      // Create encrypted input for the FHE voting contract\n      const encryptedInput = await fhevmInstance\n        .createEncryptedInput(CONTRACTS.FHE_VOTING, \"0x0000000000000000000000000000000000000000\")\n        .add32(vote)\n        .encrypt();\n\n      return {\n        encryptedVote: encryptedInput.handles[0],\n        proof: encryptedInput.inputProof,\n      };\n    } catch (error) {\n      console.error(\"Error encrypting vote:\", error);\n      throw error;\n    }\n  };\n\n  const createEncryptedInput = (contractAddress: string, userAddress: string) => {\n    if (!fhevmInstance) {\n      throw new Error(\"FHE context not initialized\");\n    }\n    return fhevmInstance.createEncryptedInput(contractAddress, userAddress);\n  };\n\n  const value: FHEContextType = {\n    isInitialized,\n    isSepolia,\n    fhevmInstance,\n    encryptVote,\n    createEncryptedInput,\n  };\n\n  return <FHEContext.Provider value={value}>{children}</FHEContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}